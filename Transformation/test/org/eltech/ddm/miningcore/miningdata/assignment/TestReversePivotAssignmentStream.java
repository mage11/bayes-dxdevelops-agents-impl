package org.eltech.ddm.miningcore.miningdata.assignment;

import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.datamining.data.AttributeDataType;

import org.eltech.ddm.associationrules.AssociationRulesFunctionSettings;
import org.eltech.ddm.associationrules.apriori.AprioriAlgorithm;
import org.eltech.ddm.associationrules.apriori.AprioriAlgorithmSettings;
import org.eltech.ddm.associationrules.apriori.AprioriMiningModel;
import org.eltech.ddm.inputdata.file.MiningArffStream;
import org.eltech.ddm.miningcore.MiningException;
import org.eltech.ddm.miningcore.miningdata.ELogicalAttribute;
import org.eltech.ddm.miningcore.miningdata.ELogicalData;
import org.eltech.ddm.miningcore.miningdata.PhysicalAttribute;
import org.eltech.ddm.miningcore.miningdata.assignment.AssignmentManager;
import org.eltech.ddm.miningcore.miningdata.assignment.AttributeAssignmentType;
import org.eltech.ddm.miningcore.miningdata.assignment.EPhysicalAttribute;
import org.junit.Test;
import org.omg.java.cwm.analysis.datamining.miningcore.miningdata.AttributeSelectionFunction;
import org.omg.java.cwm.analysis.datamining.miningcore.miningdata.AttributeType;
import org.omg.java.cwm.analysis.datamining.miningcore.miningdata.ValueSelectionFunction;

public class TestReversePivotAssignmentStream {
	private String fileNameTruFalse = "../data/arff/assignment_test/reverse_true.arff";
	private String fileNameOneZero = "../data/arff/assignment_test/reverse_10_att.arff";
	private String fileNameNullNotNull = "../data/arff/assignment_test/reverse_null.arff";
	
	//true/false
	@Test
	public void reversePivotAssignmentTrueAttribute() throws MiningException {
		testReversePivotAssignment(fileNameTruFalse, AttributeSelectionFunction.isTrue, ValueSelectionFunction.attribute);
	}
	
//	@Test
//	public void reversePivotAssignmentFalseAttribute() throws MiningException {
//		testReversePivotAssignment(fileNameTruFalse, AttributeSelectionFunction.isFalse, ValueSelectionFunction.attribute);
//	}
//
//	@Test
//	public void reversePivotAssignmentTrueValue() throws MiningException {
//		testReversePivotAssignment(fileNameTruFalse, AttributeSelectionFunction.isTrue, ValueSelectionFunction.value);
//	}
//	
//	@Test
//	public void reversePivotAssignmentFalseValue() throws MiningException {
//		testReversePivotAssignment(fileNameTruFalse, AttributeSelectionFunction.isFalse, ValueSelectionFunction.value);
//	}
//	
//	//1/0
//	@Test
//	public void reversePivotAssignmentOneAttribute() throws MiningException {
//		testReversePivotAssignment(fileNameOneZero, AttributeSelectionFunction.isOne, ValueSelectionFunction.attribute);
//	}
//	
//	@Test
//	public void reversePivotAssignmentZeroAttribute() throws MiningException {
//		testReversePivotAssignment(fileNameOneZero, AttributeSelectionFunction.isZero, ValueSelectionFunction.attribute);
//	}	
//
//	@Test
//	public void reversePivotAssignmentOneValue() throws MiningException {
//		testReversePivotAssignment(fileNameOneZero, AttributeSelectionFunction.isOne, ValueSelectionFunction.value);
//	}	
//	
//	@Test
//	public void reversePivotAssignmentZeroValue() throws MiningException {
//		testReversePivotAssignment(fileNameOneZero, AttributeSelectionFunction.isZero, ValueSelectionFunction.value);
//	}	
//	
//	//null / not null
//	@Test
//	public void reversePivotAssignmentNullAttribute() throws MiningException {
//		testReversePivotAssignment(fileNameNullNotNull, AttributeSelectionFunction.isNull, ValueSelectionFunction.attribute);
//	}
//	
//	@Test
//	public void reversePivotAssignmentNotNullAttribute() throws MiningException {
//		testReversePivotAssignment(fileNameNullNotNull, AttributeSelectionFunction.isNotNull, ValueSelectionFunction.attribute);
//	}	
//
//	@Test
//	public void reversePivotAssignmentNullValue() throws MiningException {
//		testReversePivotAssignment(fileNameNullNotNull, AttributeSelectionFunction.isNull, ValueSelectionFunction.value);
//	}	
//	
//	@Test
//	public void reversePivotAssignmentNotNullValue() throws MiningException {
//		testReversePivotAssignment(fileNameNullNotNull, AttributeSelectionFunction.isNotNull, ValueSelectionFunction.value);
//	}	
//	
	
	private void testReversePivotAssignment(String fileName, AttributeSelectionFunction attributeSelectionFunction, ValueSelectionFunction valueSelectionFunction) throws MiningException {
		MiningArffStream miningArffStream = new MiningArffStream(fileName);
	
		//get map to user interface (direct assignment) - for settings
		Map<PhysicalAttribute, ELogicalAttribute> autoGeneratedAttributes = miningArffStream.getMapAttributes();
		
		//reverse pivot assignment settings
		AssignmentManager assignmentManager = new AssignmentManager(AttributeAssignmentType.ReversePivotAttributeAssignment);
		
		PhysicalAttribute physatt_1 = new PhysicalAttribute();
		physatt_1.setDataType(AttributeDataType.stringType);
		physatt_1.setName("A");
		
		PhysicalAttribute physatt_2 = new PhysicalAttribute();
		physatt_2.setDataType(AttributeDataType.stringType);
		physatt_2.setName("B");

		PhysicalAttribute physatt_3 = new PhysicalAttribute();
		physatt_3.setDataType(AttributeDataType.stringType);
		physatt_3.setName("C");
		
		PhysicalAttribute physatt_4 = new PhysicalAttribute();
		physatt_4.setDataType(AttributeDataType.stringType);
		physatt_4.setName("D");
		
		ArrayList<PhysicalAttribute> attributeSelector = new ArrayList<PhysicalAttribute>();
		attributeSelector.add(physatt_1);
 		attributeSelector.add(physatt_2);
		attributeSelector.add(physatt_3);
		attributeSelector.add(physatt_4);
		
		//user choose attribute selection function (enum)
		AttributeSelectionFunction choosen_attributeSelectionFunction = attributeSelectionFunction;//AttributeSelectionFunction.isTrue;
		//user choose value selection function (enum)
		ValueSelectionFunction choosen_valueSelectionFunction = valueSelectionFunction;//ValueSelectionFunction.attribute;

//		assignmentManager.setSelectorAttributesSettings(attributeSelector, 
//				choosen_attributeSelectionFunction,
//				choosen_valueSelectionFunction);
		
		assignmentManager.setAttributeSettings(attributeSelector, 
				choosen_attributeSelectionFunction,
				choosen_valueSelectionFunction);
		
		miningArffStream.setAssignmentManager(assignmentManager);
		
		startAlgorithm(miningArffStream);
	}
	
	private void startAlgorithm(MiningArffStream miningArffStream) throws MiningException{
		Date start = new Date();
		
		ELogicalData logicalData = miningArffStream.getLogicalData(); //you can show logic data for user!
	
	    AprioriAlgorithmSettings algorithmSettings = new AprioriAlgorithmSettings();
	    algorithmSettings.setNumberOfTransactions(4);
	
	    AssociationRulesFunctionSettings miningSettings = new AssociationRulesFunctionSettings(logicalData);
	    miningSettings.setTransactionIDsArributeName("transactId");
	    miningSettings.setItemIDsArributeName("item");
	    
	    miningSettings.setMinConfidence(0.6);
	    miningSettings.setMinSupport(0.6);
	    miningSettings.setAlgorithmSettings(algorithmSettings);
	
	    AprioriAlgorithm aprioriAlgorithm = new AprioriAlgorithm(miningSettings);
	
	    AprioriMiningModel miningModel = (AprioriMiningModel) aprioriAlgorithm.buildModel(miningArffStream);
	    
		miningModel.getTransactionList().print();		
	   
		Date end = new Date();
		long time = (end.getTime() - start.getTime());
		System.out.println("Total time = " +  time + "мс \nAssociationRuleSet:  \n" + miningModel.getAssociationRuleSet());
	}
}
